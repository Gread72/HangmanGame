/*class HangmanMainController for game play	*/package com.gread.hangmanGame  {		import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.display.Sprite;	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.events.Event;	import flash.events.TextEvent;	import com.gread.hangmanGame.view.HangmanDisplay;	import com.gread.hangmanGame.model.ApplicationModel;		public class HangmanMain extends MovieClip {				// display components		private var _hangman:HangmanDisplay;		private var _startBtn:StartButton;		private var _wordForHanging:WordForHanging;		private var _enterLetter:EnterLetterText;		private var _letterTakenText:TextField;		private var _gameStatusText:TextField;				// variables		private var _appModel:ApplicationModel;				public function HangmanMain() {						// create model			_appModel = new ApplicationModel();						// create instance and hook up display elements			_hangman = new HangmanDisplay();			addChild(_hangman);						_hangman.addEventListener(HangmanDisplay.HANGMAN_COMPLETE, onHangmanComplete);			_hangman.x = 300;			_hangman.y = 200;						_startBtn = startBtn;			_startBtn.addEventListener(MouseEvent.MOUSE_DOWN, onClickDown);						_wordForHanging = wordForHanging;						_enterLetter = enterLetter;			TextField(_enterLetter.letterText).addEventListener(TextEvent.TEXT_INPUT, function(evt:TextEvent):void{				_enterLetter.letterText.text = evt.text.toUpperCase();			})						_letterTakenText = letterTakenText;						_gameStatusText = gameStatusText;						// initialize Game			init();		}				private function init():void{			startGame();			_enterLetter.letterText.selectable = true;		}				private function onHangmanComplete(evt:Event):void{			// if all elements are displayed - game is over			_enterLetter.letterText.selectable = false;			_gameStatusText.text = ApplicationModel.STATUS_GAME_OVER_LOSE;		}				private function startGame():void{			// setup start status and get selected word			_gameStatusText.text = ApplicationModel.STATUS_GAME_START;			buildWordForHangBox( _appModel.selectedWord );		}				private function buildWordForHangBox(word:String):void{			//create letter display of word			var widthHeightSize:Number = 38;			var offSetX:Number = 2;			var posX:Number = _wordForHanging.width / 2 - (word.length * widthHeightSize + offSetX) / 2 + 10;			var posY:Number = _wordForHanging.height / 2;						for(var i:Number = 0; i < word.length; i++){				var letter:LetterItem = new LetterItem();				letter.name = "letter_" + i;				_wordForHanging.addChild(letter);				TextField(letter.letterText).selectable = false;				letter.x = posX;				letter.y = posY;				posX =+ letter.x + widthHeightSize + offSetX;			}					}				private function onClickDown(evt:MouseEvent):void{			// handler of submit event of letter input			if(!checkLetterOut(_enterLetter.letterText.text, _appModel.selectedWord)){				_hangman.addPart();			}			_enterLetter.letterText.text = "";						// if all letters found - game over - user wins			if(_appModel.correctLettersCount == _appModel.selectedWord.length){				_gameStatusText.text = ApplicationModel.STATUS_GAME_OVER_WIN;				_enterLetter.letterText.selectable = false;			}		}				private function checkLetterOut(letter:String, word:String):Boolean{			// verify letter is correct			var letterFound:Boolean = false;			for(var i:Number = 0; i < word.length; i++){				if(word.charAt(i) == letter){					var letterItem:LetterItem = LetterItem( _wordForHanging.getChildByName("letter_" + i) );					letterItem.letterText.text = word.charAt(i);					letterFound = true;					_appModel.correctLettersCount++;				}			}						if(!letterFound){				_letterTakenText.appendText( letter + " " );			}			return letterFound;		}					}	}